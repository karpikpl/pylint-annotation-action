name: Continuous Integration

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: read
  statuses: write
  issues: read
  checks: write
  pull-requests: write

jobs:
  test-javascript:
    name: JavaScript Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install Dependencies
        id: npm-ci
        run: npm ci

      - name: Check Format
        id: npm-format-check
        run: npm run format:check

      - name: Lint
        id: npm-lint
        run: npm run lint

      - name: Test
        id: npm-ci-test
        run: npm run ci-test

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          check_name: Test Results JS
          files: |
            .reports/**/*.xml

      - uses: actions/upload-artifact@v4
        with:
          name: js-results
          path: |
            reports/*
            coverage/*

      - name: Code Coverage Summary Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ./coverage/*.xml
          badge: true
          format: markdown
          output: both

      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

      - name: Add Coverage Summary
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            // read summary file
            var summary = fs.readFileSync('code-coverage-results.md', 'utf8');

            await core.summary
            .addHeading('JS Code Coverage Summary')
            .addRaw(summary)
            .write()

  test-action:
    name: GitHub Actions Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      - name: Test Local Action
        id: test-action
        uses: ./
        with:
          lint-file: './__tests__/pylintClean.json'
          pylint-result-code: 0
          head-sha: ${{ github.sha }}

      - name: Print Output
        id: output
        run: |
          echo "result: ${{ steps.test-action.outputs.result }}"

          # throw an error if the result is not success
          if [ "${{ steps.test-action.outputs.result }}" != "Success" ]; then
            exit 1
          fi
